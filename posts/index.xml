<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Rows and Columns</title>
    <link>https://jlucasdba.github.io/posts/</link>
    <description>Recent content in Posts on Rows and Columns</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 05 Jan 2022 17:53:07 -0600</lastBuildDate><atom:link href="https://jlucasdba.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>pgstratify, Part 2</title>
      <link>https://jlucasdba.github.io/posts/pgstratify2/</link>
      <pubDate>Wed, 05 Jan 2022 17:53:07 -0600</pubDate>
      
      <guid>https://jlucasdba.github.io/posts/pgstratify2/</guid>
      <description>In my last post I talked about my new tool, pgstratify. I started writing this post to go over pgstratify use-cases, but it ended up being all about the details of autovacuuming instead. The use-cases will have to wait for Part 3. Note that I&amp;rsquo;m turning autovacuum on and off here for illustration purposes. Obviously don&amp;rsquo;t do this in a production database.
So to start with, we create a small test table and insert some rows into it:</description>
    </item>
    
    <item>
      <title>pgstratify</title>
      <link>https://jlucasdba.github.io/posts/pgstratify/</link>
      <pubDate>Tue, 04 Jan 2022 23:14:00 -0600</pubDate>
      
      <guid>https://jlucasdba.github.io/posts/pgstratify/</guid>
      <description>I wanted to share a project I&amp;rsquo;ve been working on the last few weeks, called pgstratify. This was written in equal parts to provide a tool I thought would be useful for postgres DBAs, and as an exercise to teach myself Go. I feel like it succeeded pretty well on both fronts.
The core idea of pgstratify is to help a DBA manage the storage parameters on individual tables in the database.</description>
    </item>
    
    <item>
      <title>Postgres work_mem</title>
      <link>https://jlucasdba.github.io/posts/work_mem/</link>
      <pubDate>Wed, 27 Oct 2021 19:55:05 -0500</pubDate>
      
      <guid>https://jlucasdba.github.io/posts/work_mem/</guid>
      <description>As a followup to the post I did a while back about postgres&#39; shared_buffers setting, I think it&amp;rsquo;s also worth talking about the work_mem setting. Shared_buffers controls the size of the shared memory pool common to all backend server processes. Work_mem controls the amount of process local memory used by backend server processes for executing query operations. The main operations that use work_mem are sorts and hash joins.
From here on I&amp;rsquo;m only going to talk about sorts, but the same principles apply to hash joins as well.</description>
    </item>
    
    <item>
      <title>DIMM Ordering</title>
      <link>https://jlucasdba.github.io/posts/dimm-ordering/</link>
      <pubDate>Thu, 04 Feb 2021 18:39:33 -0600</pubDate>
      
      <guid>https://jlucasdba.github.io/posts/dimm-ordering/</guid>
      <description>I usually talk about software issues, but today an interesting story about hardware. I was upgrading the RAM in my personal desktop a few weeks ago. I bought a 2x16GB DIMM kit, rated for DDR-3200 XMP operation. XMP is basically a factory-flagged overclock mode, where setting the motherboard to XMP mode should allow the system to clock the RAM at the rated speed on the package. There&amp;rsquo;s no absolute guarantee this will work with any given motherboard, but the DIMMs are checked at the factory and binned for it.</description>
    </item>
    
    <item>
      <title>Postgres shared_buffers</title>
      <link>https://jlucasdba.github.io/posts/shared_buffers/</link>
      <pubDate>Thu, 31 Dec 2020 13:51:29 -0600</pubDate>
      
      <guid>https://jlucasdba.github.io/posts/shared_buffers/</guid>
      <description>Let&amp;rsquo;s talk about shared_buffers in postgres. Postgres has very good documentation, but the tuning of this important parameter is one area where the documentation is unfortunately a bit vague.
When postgres starts up, it grabs a chunk of memory that is shared between all backend server processes. Shared_buffers controls the size of this shared memory pool. Every page the database reads or writes passes through this shared memory.
Everytime the database reads a page from disk, it&amp;rsquo;s stored in these shared buffers.</description>
    </item>
    
    <item>
      <title>Git filter-branch</title>
      <link>https://jlucasdba.github.io/posts/git-filter-branch/</link>
      <pubDate>Tue, 08 Dec 2020 20:06:11 -0600</pubDate>
      
      <guid>https://jlucasdba.github.io/posts/git-filter-branch/</guid>
      <description>Let&amp;rsquo;s talk about one of the less-understood git commands for a minute: git filter-branch. What do you do if some element exists in your git repository that you need to expunge? Say a password, or a sensitive email address. Well, ideally you should change the password or the email address, because rewriting git history is not something you should undertake lightly. But, if you&amp;rsquo;re a brave soul who ignores the warning signs, and ventures down the dark path, filter-branch is what you use.</description>
    </item>
    
    <item>
      <title>Hugo</title>
      <link>https://jlucasdba.github.io/posts/hugo/</link>
      <pubDate>Mon, 30 Nov 2020 17:19:55 -0600</pubDate>
      
      <guid>https://jlucasdba.github.io/posts/hugo/</guid>
      <description>I wanted to do a quick post about the blogging setup I&amp;rsquo;m using, and why I chose it. The purpose of this blog is to provide a place to do write-ups on topics of interest I run across in my work, and share them with the community. Github Pages seemed like a natural (and inexpensive!) hosting solution, given the target audience.
While I was researching hosting, the topic of static site generators came up.</description>
    </item>
    
    <item>
      <title>Postgres Table Bloat</title>
      <link>https://jlucasdba.github.io/posts/tablebloat/</link>
      <pubDate>Wed, 25 Nov 2020 11:29:05 -0600</pubDate>
      
      <guid>https://jlucasdba.github.io/posts/tablebloat/</guid>
      <description>One of the things DBAs coming from other database systems (like Oracle) need to be aware of when coming to Postgres is how Postgres manages changed data. This is covered in depth in a lot of other places, so I won&amp;rsquo;t repeat in too much detail. The short version is that when a row is updated or deleted, Postgres maintains the old version of that row within the table data file.</description>
    </item>
    
    <item>
      <title>Hello, World!</title>
      <link>https://jlucasdba.github.io/posts/firstpost/</link>
      <pubDate>Sat, 21 Nov 2020 17:55:02 -0600</pubDate>
      
      <guid>https://jlucasdba.github.io/posts/firstpost/</guid>
      <description>So this is an experiment. I&amp;rsquo;ve never tried to do a blog before, and we&amp;rsquo;re going to see how it goes.
I&amp;rsquo;ve worked in tech a lot of years now. Every so often you come across an interesting problem or learn something new, and I&amp;rsquo;ve often thought it would be nice to have a place to write it up and share it with others. So that&amp;rsquo;s what I aim for this page to be.</description>
    </item>
    
  </channel>
</rss>
